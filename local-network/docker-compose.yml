version: '3'

services:
  traefik:
    image: traefik:v2.9
    container_name: "traefik"
    command:
      - --providers.docker=true
      # Enable the API handler in insecure mode,
      # which means that the Traefik API will be available directly
      # on the entry point named traefik.
      - --api.insecure=true
      # Defines the path to the configuration file with the certificates list.
      - "--providers.file.filename=/etc/traefik/traefik.config.toml"
      # - --providers.file.filename=/root/.config/ssl.toml
      # Define Traefik entry points to port [80] for http and port [443] for https.
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
    networks:
      # Define the network on which traefik is going to operate.
      - docker-home-net
    ports:
      # Open traefik http [80] and https [443] ports.
      - '80:80'
      - '443:443'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # Mount the configuration file with the certificates list.
      - ${USERHOME}/server/traefik/traefik.config.toml:/root/.config/ssl.toml
      # Mount the folder containing the certificates for https.
      - certs:/certs/
    labels:
      - "traefik.enable=true"
      # Enable Traefik API handler entrypoint on http.
      - "traefik.http.routers.traefik-http.entrypoints=web"
      # Define Traefik API handler http host.
      - "traefik.http.routers.traefik-http.rule=Host(`${DOCKER_BASE_URL}`)"
      # Define http middleware and redirection to https.
      - "traefik.http.routers.traefik-http.middlewares=traefik-https"
      - "traefik.http.middlewares.traefik-https.redirectscheme.scheme=https"
      # Enable Traefik API handler entrypoint on https.
      - "traefik.http.routers.traefik.entrypoints=websecure"
      # By default the Traefik API handler operates on the port [8080].
      # Define a load balancer to route the entry point to [8080].
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      # Define Traefik API handler host.
      - "traefik.http.routers.traefik.rule=Host(`${DOCKER_BASE_URL}`)"
      # Instructs Traefik that the current router is dedicated to HTTPS requests only.
      - "traefik.http.routers.traefik.tls=true"
    extra_hosts:
      - host.docker.internal:172.17.0.1
  # whoami:
  #   image: containous/whoami
  #   container_name: "whoami"
  #   networks:
  #     - docker-home-net
  #   labels:
  #     # Enable Whoami handler entrypoint on http.
  #     - "traefik.http.routers.whoami-http.entrypoints=web"
  #     # Define Whoami handler http host.
  #     - "traefik.http.routers.whoami-http.rule=Host(`whoami.${DOCKER_BASE_URL}`)"
  #     # Define http middleware and redirection to https.
  #     - "traefik.http.routers.whoami-http.middlewares=whoami-https"
  #     - "traefik.http.middlewares.whoami-https.redirectscheme.scheme=https"
  #     # Enable Whoami handler entrypoint on https.
  #     - "traefik.http.routers.whoami.entrypoints=websecure"
  #     # Define Whoami handler host.
  #     - "traefik.http.routers._whoami.rule=Host(`whoami.${DOCKER_BASE_URL}`)"
  #     # Instructs Whoami that the current router is dedicated to HTTPS requests only.
  #     - "traefik.http.routers._whoami.tls=true"
  #     # Define on which network Traefik is operating.
  #     - "traefik.docker.network=docker-home-net"

  omgwtfssl:
    image: paulczar/omgwtfssl
    restart: "no"
    volumes:
      - certs:/certs
    environment:
      - SSL_SUBJECT=${DOCKER_BASE_URL}
      - CA_SUBJECT=home@uelei.com
      - SSL_KEY=/certs/default.key
      - SSL_CSR=/certs/default.csr
      - SSL_CERT=/certs/default.crt
    networks:
      - docker-home-net

# PIHOLE 
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - 192.168.1.10:53:53/tcp
      - 192.168.1.10:53:53/udp
      # - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
      # - "8888:80/tcp" handle on traefik
    environment:
      - TZ=${TIMEZONE}
      - WEBPASSWORD=${WEBPASSWORD}
      # WEBPASSWORD: 'set a secure password here or it will be random'
    # Volumes store your data between container upgrades
    volumes:
      - ${USERHOME}/server/pihole/etc-pihole:/etc/pihole
      - ${USERHOME}/server/pihole/etc-dnsmasq.d:/etc/dnsmasq.d
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    # cap_add:
    #   - NET_ADMIN # Recommended but not required (DHCP needs NET_ADMIN)
    restart: unless-stopped
    networks:
      - docker-home-net
    labels:
      # Enable pihole handler entrypoint on http.
      - "traefik.http.routers.pihole-http.entrypoints=web"
      # Define pihole handler http host.
      - "traefik.http.routers.pihole-http.rule=Host(`pihole.${DOCKER_BASE_URL}`)"
      # Define http middleware and redirection to https.
      - "traefik.http.routers.pihole-http.middlewares=pihole-https"
      - "traefik.http.middlewares.pihole-https.redirectscheme.scheme=https"
      # Enable pihole handler entrypoint on https.
      - "traefik.http.routers.pihole.entrypoints=websecure"
      # Define pihole handler host.
      - "traefik.http.routers._pihole.rule=Host(`pihole.${DOCKER_BASE_URL}`)"
      # Instructs pihole that the current router is dedicated to HTTPS requests only.
      - "traefik.http.routers._pihole.tls=true"
      # Define on which network Traefik is operating.
      - "traefik.docker.network=docker-home-net"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"
      # pihole labels for traefik
      - "traefik.http.routers.pihole.middlewares=pihole-prefix"
      - "traefik.http.middlewares.pihole-prefix.addPrefix.prefix=/admin"
      # add tcp services
      - "traefik.tcp.routers.dnstcp.entrypoints=dnstcp"
      - "traefik.tcp.routers.dnstcp.rule=HostSNI(`*`)"
      - "traefik.tcp.services.pihole.loadbalancer.server.port=53"

      - "traefik.udp.routers.dnsudp.entrypoints=dnsudp"
      - "traefik.udp.services.pihole.loadbalancer.server.port=53"


  zerotier:
    image: zerotier/zerotier:latest
    restart: unless-stopped
    devices:
      - /dev/net/tun
    network_mode: host
    volumes:
      - '/var/lib/zerotier-one:/var/lib/zerotier-one'
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN

networks:
  docker-home-net:
    external: true

volumes:
  certs:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${USERHOME}/server/traefik/certs/

  # drobo:
  #   driver: local
  #   driver_opts:
  #     type: nfs
  #     o: addr=192.168.1.50,rw
  #     device: ":/mnt/DroboFS/Shares/Public"
